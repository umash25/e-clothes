{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, createUserProfileDocument, getCurrentUser, googleProvider } from '../../firebase/firebase';\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from './user.action';\nimport { UserActionTypes } from './user.types';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* googleSignIn() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* emailSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n;\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n;\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n;\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* onSignInWithGoogle() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n}\n;\nexport function* onSignInWithEmail() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\n;\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n;\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n;\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n;\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n;\nexport function* userSagas() {\n  yield all([call(onSignInWithGoogle), call(onSignInWithEmail), call(onCheckUserSession), call(isUserAuthenticated), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}\n;","map":{"version":3,"sources":["E:/umash/coding/reactApps/e-clothes/src/redux/users/user.sagas.js"],"names":["takeLatest","put","all","call","auth","createUserProfileDocument","getCurrentUser","googleProvider","signInFailure","signInSuccess","signOutFailure","signOutSuccess","signUpFailure","signUpSuccess","UserActionTypes","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","googleSignIn","user","signInWithPopup","emailSignIn","payload","email","password","signInWithEmailAndPassword","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","signOut","isUserAuthenticated","onSignInWithGoogle","GOOGLE_SIGN_IN_START","onSignInWithEmail","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\nimport { auth, createUserProfileDocument, getCurrentUser, googleProvider } from '../../firebase/firebase';\r\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess } from './user.action';\r\nimport { UserActionTypes } from './user.types';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({\r\n            id: userSnapshot.id, ...userSnapshot.data()\r\n        }));\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* googleSignIn() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* emailSignIn({ payload: { email, password } }) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* signUp({ payload: { email, password, displayName } }) {\r\n    try {\r\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n        yield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n    } catch (error) {\r\n        yield put(signUpFailure(error))\r\n    }\r\n};\r\n\r\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\r\n    yield getSnapshotFromUserAuth(user, additionalData);\r\n};\r\n\r\nexport function* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess());\r\n    } catch (error) {\r\n        yield put(signOutFailure(error));\r\n    }\r\n};\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if (!userAuth) return;\r\n        yield getSnapshotFromUserAuth(userAuth)\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* onSignInWithGoogle() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\r\n};\r\n\r\nexport function* onSignInWithEmail() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\r\n};\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n};\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\r\n};\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\r\n};\r\n\r\nexport function* onSignUpSuccess() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n};\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onSignInWithGoogle),\r\n        call(onSignInWithEmail),\r\n        call(onCheckUserSession),\r\n        call(isUserAuthenticated),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}